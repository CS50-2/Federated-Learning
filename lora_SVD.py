# -*- coding: utf-8 -*-
"""Federated Training.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tE-M1T-9BL-HglL5A7asx4b31Sdyhcdq
"""

import torch
import torch.nn as nn
import torch.optim as optim
import torch.utils.data as data
import torchvision.transforms as transforms
import torchvision.datasets as datasets
import numpy as np
import random
import os
import matplotlib.pyplot as plt
import ssl 
from datetime import datetime
import pandas as pd
import torch.nn.functional as F


class LoRALayer(nn.Module):
    def __init__(self, in_dim, out_dim, rank, alpha, use_svd=False, linear=None):
        super().__init__()
        self.use_svd = use_svd  # Flag to decide if SVD should be used
        self.alpha = alpha
        
        if use_svd:
            # Initialize LoRA parameters using SVD
            source_linear = linear.weight.data
            source_linear = source_linear.float()
            U, S, V = torch.linalg.svd(source_linear)  # Perform SVD
            U_r = U[:, :rank]  # Take the first 'rank' singular vectors
            S_r = torch.diag(S[:rank])  # Create the diagonal matrix for the top 'rank' singular values
            V_r = V[:, :rank].t()  # Take the first 'rank' singular vectors
            
            # Use SVD components to initialize A and B
            self.A = nn.Parameter(U_r)  # The A matrix
            self.B = nn.Parameter(S_r @ V_r)  # The B matrix (rank x out_dim) using S_r * V_r^T
        else:
            # Random initialization
            std_dev = 1 / torch.sqrt(torch.tensor(rank).float())
            self.A = nn.Parameter(torch.randn(in_dim, rank) * std_dev)
            self.B = nn.Parameter(torch.zeros(rank, out_dim))

    # def forward(self, x):
    #     x=self.alpha*(x@self.A@self.B)
    #     return x


class LinearWithLoRA(nn.Module):
    def __init__(self, linear, rank, alpha, use_svd=False):
        super().__init__()
        self.linear = linear
        self.lora = LoRALayer(linear.in_features, linear.out_features, rank, alpha, use_svd=use_svd, linear=linear)

    def forward(self, x):
        # Apply LoRA to original weights
        lora = self.lora.A @ self.lora.B # combine LoRA metrices
        combined_weight = self.linear.weight + self.lora.alpha * lora
        return F.linear(x, combined_weight, self.linear.bias)

    
# 定义 MLP 模型
class MLPModel(nn.Module):
    def __init__(self, is_LoRA=False, rank=4, alpha=8, use_svd=False):
        super(MLPModel, self).__init__()

        self.is_LoRA = is_LoRA 
        self.use_svd = use_svd 

        if not self.is_LoRA:  # Use the original linear layers
            self.fc1 = nn.Linear(28 * 28, 200)  # 第一层，输入维度 784 -> 200
            self.fc2 = nn.Linear(200, 200)      # 第二层，200 -> 200
            self.fc3 = nn.Linear(200, 10)       # 输出层，200 -> 10
            self.relu = nn.ReLU()
        else:  # Use LoRA-enhanced layers
            self.fc1 = nn.Linear(28 * 28, 200)
            self.fc2 = LinearWithLoRA(nn.Linear(200, 200), rank, alpha, use_svd=self.use_svd)
            self.fc3 = nn.Linear(200, 10)
            self.relu = nn.ReLU()

    def forward(self, x):
        x = x.view(x.size(0), -1)  # Flatten the input (batch_size, 1, 28, 28) -> (batch_size, 784)
        x = self.relu(self.fc1(x))
        x = self.relu(self.fc2(x))
        x = self.fc3(x)  # Direct output, no need for Softmax (CrossEntropyLoss already includes it)
        return x

def freeze_linear_layers(model):
    """Freeze the original layers in the model, leaving only LoRA layers trainable."""
    for child in model.children():
        if isinstance(child, LinearWithLoRA):
            # Freeze the original weights (linear layers)
            for param in child.linear.parameters():
                param.requires_grad = False # not accepting additional gradients 
        else:
            # Recursively freeze linear layers in children modules
            freeze_linear_layers(child)


# 加载 MNIST 数据集
def load_mnist_data(data_path="./data"):
    
    # Temporarily Skip SSL velidation step 
    ssl._create_default_https_context = ssl._create_unverified_context

    transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))])

    if os.path.exists(os.path.join(data_path, "MNIST/raw/train-images-idx3-ubyte")):
        print("✅ MNIST 数据集已存在，跳过下载。")
    else:
        print("⬇️ 正在下载 MNIST 数据集...")

    train_data = datasets.MNIST(root=data_path, train=True, transform=transform, download=True)
    test_data = datasets.MNIST(root=data_path, train=False, transform=transform, download=True)

    return train_data, test_data

# 分割 MNIST 数据，使每个客户端只包含某个数字类别
def split_data_by_label(dataset, num_clients=10):
    
    # Mannually set each client'id and corresponding dataset distribution 
    # client_data_sizes = {
    #     0: {0: 600, 1: 700, 2: 600, 3: 600, 4: 500, 5: 500, 6: 100, 7: 100, 8: 100, 9: 100},
    #     1: {0: 700, 1: 600, 2: 600, 3: 600, 4: 500, 5: 100, 6: 100, 7: 100, 8: 100, 9: 600},
    #     2: {0: 500, 1: 600, 2: 700, 3: 600, 4: 100, 5: 100, 6: 100, 7: 100, 8: 600, 9: 500},
    #     3: {0: 600, 1: 600, 2: 500, 3: 100, 4: 100, 5: 100, 6: 100, 7: 500, 8: 500, 9: 700},
    #     4: {0: 600, 1: 500, 2: 100, 3: 100, 4: 100, 5: 100, 6: 600, 7: 700, 8: 500, 9: 500},
    #     5: {0: 500, 1: 100, 2: 100, 3: 100, 4: 100, 5: 600, 6: 500, 7: 600, 8: 700, 9: 600},
    #     6: {0: 100, 1: 100, 2: 100, 3: 100, 4: 700, 5: 500, 6: 600, 7: 500, 8: 500, 9: 600},
    #     7: {0: 100, 1: 100, 2: 100, 3: 600, 4: 500, 5: 600, 6: 500, 7: 600, 8: 500, 9: 100},
    #     8: {0: 100, 1: 100, 2: 500, 3: 500, 4: 600, 5: 500, 6: 600, 7: 500, 8: 100, 9: 100},
    #     9: {0: 100, 1: 700, 2: 600, 3: 600, 4: 600, 5: 500, 6: 600, 7: 100, 8: 100, 9: 100}
    # }

    client_data_sizes = {
        0: {0: 600},
        1: {1: 600},
        2: {2: 500},
        3: {3: 600},
        4: {4: 600},
        5: {5: 500},
        6: {6: 100},
        7: {7: 100},
        8: {8: 100},
        9: {9: 100}
    }

    # Initialize an empty dictionary to store indices for each label (from 0 to 9) 
    label_to_indices = {}

    for label in range(10):
        label_to_indices[label] = []  

    # Loop through the dataset using enumerate to get both the index and the data item.
    # Each data item is a tuple (image, label).
    for index, (_, label) in enumerate(dataset):
        # Append the current index to the list corresponding to the data's label.
        label_to_indices[label].append(index)

    # Create an empty dictionary to store the data subset for each client.
    client_data_subsets = {}

    # Initialize a dictionary to record the actual number of samples allocated for each label in each client.
    client_actual_sizes = {}
    for client_id in range(num_clients):
        # For each client, initialize an empty dictionary to store the sample counts for labels 0 to 9.
        client_actual_sizes[client_id] = {}
        
        # For each label from 0 to 9, set the initial count to 0.
        for label in range(10):
            client_actual_sizes[client_id][label] = 0
    
    # Iterate over each client and assign data for the specified labels.
    for client_id, label_info in client_data_sizes.items():
        selected_indices = []
        
        for label, required_size in label_info.items():
            available_size = len(label_to_indices[label])
            
            # Determine the number of samples to select
            sample_size = min(available_size, required_size)
            
            # If the available sample size is less than the required size, print a warning message.
            if sample_size < required_size:
                print(f"⚠️ Warning: Not enough data for label {label}. Client {client_id} can only get {sample_size} samples (required {required_size}).")
            
            # Randomly select the determined number of indices and add the selected indices to the client's list.
            sampled_indices = random.sample(label_to_indices[label], sample_size)
            selected_indices.extend(sampled_indices)
            
            # Record the actual number of samples allocated for this label for the current client.
            client_actual_sizes[client_id][label] = sample_size
        
        # Create a PyTorch Subset for this client using the selected indices.
        client_data_subsets[client_id] = torch.utils.data.Subset(dataset, selected_indices)


    print("\n📊 Actual data distribution per client:")
    for client_id, label_sizes in client_actual_sizes.items():
        print(f"Client {client_id}: {label_sizes}")

    # Return both the client data subsets and the dictionary of actual sample sizes.
    return client_data_subsets, client_actual_sizes


def local_train(model, train_loader, epochs=5, lr=0.1, is_LoRA=False):
    """Train the model on a local client, freezing original layers if using LoRA."""
    criterion = nn.CrossEntropyLoss()

    if is_LoRA:  # If LoRA is enabled, freeze the original layers
        freeze_linear_layers(model)
        # Only update LoRA parameters (A and B)
        params_to_update = [param for param in model.parameters() if param.requires_grad]
        optimizer = optim.SGD(params_to_update, lr=lr)
    else: 
        optimizer = optim.SGD(model.parameters(), lr=lr)

    model.train()
    for epoch in range(epochs):
        for batch_x, batch_y in train_loader:
            optimizer.zero_grad()
            outputs = model(batch_x)
            loss = criterion(outputs, batch_y)
            loss.backward()
            optimizer.step()

    return model.state_dict()

# 联邦平均聚合函数
def fed_avg(global_model, client_state_dicts, client_sizes):
    global_dict = global_model.state_dict()
    
    # Extract client IDs from client_state_dicts tuples.
    subkey = [sublist[0] for sublist in client_state_dicts]
    
    # Create a new dictionary of client sizes using only the clients that were selected.
    new_client_sizes = dict([(key, client_sizes[key]) for key in subkey])
    
    # Calculate the total number of samples across all selected clients.
    # Here, each client size is now assumed to be a nested dictionary (per label), so we sum the values for each client.
    total_data = sum(sum(label_sizes.values()) for label_sizes in new_client_sizes.values())
    
    # Update each parameter in the global model.
    for key in global_dict.keys():
        global_dict[key] = sum(
            client_state[key] * (sum(new_client_sizes[client_id].values()) / total_data)
            for (client_id, client_state) in client_state_dicts
        )
    
    global_model.load_state_dict(global_dict)
    return global_model

# 评估模型
def evaluate(model, test_loader):
    model.eval()
    criterion = nn.CrossEntropyLoss()
    correct, total, total_loss = 0, 0, 0.0
    with torch.no_grad():
        for batch_x, batch_y in test_loader:
            outputs = model(batch_x)
            loss = criterion(outputs, batch_y)
            total_loss += loss.item()
            _, predicted = torch.max(outputs, 1)
            total += batch_y.size(0)
            correct += (predicted == batch_y).sum().item()
    accuracy = correct / total * 100
    return total_loss / len(test_loader), accuracy

def entropy_weight(l):
    weight = []
    for X in l:

        P = X / X.sum(axis=0)

        K = 1 / np.log(len(X))
        E = -K * (P * np.log(P + 1e-12)).sum(axis=0)
        weight.append(E)
    one_minus_weight = [1 - w for w in weight]
    sum_one_minus_weight = sum(one_minus_weight)
    new_weight = [w / sum_one_minus_weight for w in one_minus_weight]

    return new_weight


def calculate_GRC(global_model, client_models, client_losses):
    """
    正确计算 GRC 分数，并修正后续步骤
    """

    # 1. 计算客户端指标（参数差异）
    param_diffs = []
    for model in client_models:
        diff = 0.0
        for g_param, l_param in zip(global_model.parameters(), model.parameters()):
            diff += torch.norm(g_param - l_param).item()
        param_diffs.append(diff)

    # 2. 对 losses 和 diffs 进行正确 mapping
    def map_sequence_loss(sequence):
        max_val = max(sequence)
        min_val = min(sequence)
        return [(max_val - x) / (max_val + min_val) for x in sequence]  # 【✔】负相关

    def map_sequence_diff(sequence):
        max_val = max(sequence)
        min_val = min(sequence)
        return [(x - min_val) / (max_val + min_val) for x in sequence]  # 【✔】正相关

    client_losses = map_sequence_loss(client_losses)
    param_diffs = map_sequence_diff(param_diffs)

    # 3. 构建参考序列 (理想值 = 1)
    ref_loss = 1.0
    ref_diff = 1.0

    # 4. 计算每个指标的 Δ
    all_deltas = []
    for loss, diff in zip(client_losses, param_diffs):
        all_deltas.append(abs(loss - ref_loss))
        all_deltas.append(abs(diff - ref_diff))
    max_delta = max(all_deltas)
    min_delta = min(all_deltas)

    # 5. 计算灰色关联系数 (GRC)，ρ=0.5
    grc_losses = []
    grc_diffs = []
    for loss, diff in zip(client_losses, param_diffs):
        delta_loss = abs(loss - ref_loss)
        delta_diff = abs(diff - ref_diff)

        grc_loss = (min_delta + 0.5 * max_delta) / (delta_loss + 0.5 * max_delta)
        grc_diff = (min_delta + 0.5 * max_delta) / (delta_diff + 0.5 * max_delta)

        grc_losses.append(grc_loss)
        grc_diffs.append(grc_diff)

    grc_losses = np.array(grc_losses)
    grc_diffs = np.array(grc_diffs)

    # 6. 计算熵权（基于原始mapped数据）
    grc_metrics = np.vstack([client_losses, param_diffs])  # 【注意】这里 shape 是 (2, n_clients)
    weights = entropy_weight(grc_metrics)  # 【✔】熵权算的是原mapped指标，不是grc！

    # 7. 加权求和，注意是【乘法】不是除法
    weighted_score = grc_losses * weights[0] + grc_diffs * weights[1]  # 【修改点】乘法！

    return weighted_score, weights


def select_clients(client_loaders, use_all_clients=False, num_select=None,
                   select_by_loss=False, global_model=None, grc=True):
    if grc:  # 使用 GRC 选择客户端
        client_models = []
        # 1. 训练本地模型并计算损失
        client_losses = []
        for client_id, client_loader in client_loaders.items():
            local_model = MLPModel()
            local_model.load_state_dict(global_model.state_dict())  # 同步全局模型
            local_train(local_model, client_loader, epochs=1, lr=0.01)
            client_models.append(local_model)
            loss, _ = evaluate(local_model, client_loader)
            client_losses.append(loss)

        # 2. 计算 GRC 分数
        grc_scores, grc_weights = calculate_GRC(global_model, client_models, client_losses)
        select_clients.latest_weights = grc_weights  # 记录权重

        # 3. 按 GRC 分数排序（从高到低，GRC越高表示越好）
        client_grc_pairs = list(zip(client_loaders.keys(), grc_scores))
        client_grc_pairs.sort(key=lambda x: x[1], reverse=True)  # 降序排序

        # 4. 选择 GRC 最高的前 num_select 个客户端
        selected = [client_id for client_id, _ in client_grc_pairs[:num_select]]
        return selected

    # 其余选择逻辑保持不变
    if use_all_clients is True:
        print("Selecting all clients")
        return list(client_loaders.keys())

    if num_select is None:
        raise ValueError("If use_all_clients=False, num_select cannot be None!")

    if select_by_loss and global_model:
        client_losses = {}
        for client_id, loader in client_loaders.items():
            loss, _ = evaluate(global_model, loader)
            client_losses[client_id] = loss

        selected_clients = sorted(client_losses, key=client_losses.get, reverse=True)[:num_select]
        print(f"Selected {num_select} clients with the highest loss: {selected_clients}")
    else:
        selected_clients = random.sample(list(client_loaders.keys()), num_select)
        print(f"Randomly selected {num_select} clients: {selected_clients}")

    return selected_clients


def update_communication_counts(communication_counts, selected_clients, event):
    """
    客户端通信计数
    - event='receive' 表示客户端接收到全局模型
    - event='send' 表示客户端上传本地模型
    - event='full_round' 仅在客户端完成完整收发时增加
    """
    for client_id in selected_clients:
        communication_counts[client_id][event] += 1

        # 仅当客户端完成一次完整的 send 和 receive 时增加 full_round
        if event == "send" and communication_counts[client_id]['receive'] > 0:
            communication_counts[client_id]['full_round'] += 1

def run_experiment(selection_method, rounds=100, num_selected_clients=2, is_LoRA=False, use_svd=False):
    torch.manual_seed(0)
    random.seed(0)
    np.random.seed(0)

    # 加载 MNIST 数据集
    train_data, test_data = load_mnist_data()

    # 生成客户端数据集，每个客户端只包含特定类别
    client_datasets, client_data_sizes = split_data_by_label(train_data)

    # 创建数据加载器
    client_loaders = {client_id: data.DataLoader(dataset, batch_size=32, shuffle=True)
                      for client_id, dataset in client_datasets.items()}
    test_loader = data.DataLoader(test_data, batch_size=32, shuffle=False)

    # Initialize global model, communication_counts, and results storage
    global_model = MLPModel(is_LoRA=is_LoRA, use_svd=use_svd) # Use LoRA & SVD or not   
    global_accuracies = []
    total_communication_counts = []
    csv_data = []

    # Initialize communication counters for all clients
    communication_counts = {client_id: {'send': 0, 'receive': 0, 'full_round': 0}
                            for client_id in client_loaders.keys()}

    for r in range(rounds):
        print(f"\nRound {r+1}")
        
        # Select clients based on the specified method:
        if selection_method == "fedGRA":
            selected_clients = select_clients(client_loaders, use_all_clients=False,
                                              num_select=num_selected_clients,
                                              select_by_loss=True, global_model=global_model, grc=True)
        elif selection_method == "high_loss":
            # Use loss-based selection without GRC (select top 2 highest loss clients)
            selected_clients = select_clients(client_loaders, use_all_clients=False,
                                              num_select=num_selected_clients,
                                              select_by_loss=True, global_model=global_model, grc=False)
        elif selection_method == "fedavg":
            # Use FedAvg with either random selection or all clients.
            # Using all clients or random selection for FedAvg.
            selected_clients = select_clients(client_loaders, use_all_clients=True,
                                              num_select=num_selected_clients,
                                              select_by_loss=False, global_model=global_model, grc=False)

        # Record receive communication count
        update_communication_counts(communication_counts, selected_clients, "receive")
        client_state_dicts = []

        # Perform local training on selected clients
        for client_id in selected_clients:
            client_loader = client_loaders[client_id]
            local_model = MLPModel(is_LoRA=is_LoRA, use_svd=use_svd) # Use LoRA & SVD or not   
            local_model.load_state_dict(global_model.state_dict())  # Sync with the global model
            local_train(local_model, client_loader, epochs=1, lr=0.01, is_LoRA=is_LoRA)
            client_state_dicts.append((client_id, local_model.state_dict()))
            update_communication_counts(communication_counts, [client_id], "send")
            print(f"Client {client_id} trained.")

        # Compute communication counts for this round
        total_send = sum(communication_counts[c]['send'] - (communication_counts[c]['full_round'] - 1)
                         for c in selected_clients)
        total_receive = sum(communication_counts[c]['receive'] - (communication_counts[c]['full_round'] - 1)
                            for c in selected_clients)
        total_comm = total_send + total_receive
        total_communication_counts.append(total_comm)

        # Aggregate model updates
        global_model = fed_avg(global_model, client_state_dicts, client_data_sizes)

        # Evaluate global model
        loss, accuracy = evaluate(global_model, test_loader)
        global_accuracies.append(accuracy)
        print(f"Test Accuracy: {accuracy:.2f}%")
        
        # Save round data; add a column indicating the method used if desired.
        csv_data.append([r+1, accuracy, total_comm])

    # Convert collected data to a DataFrame
    df = pd.DataFrame(csv_data, columns=['Round', f'Accuracy_{selection_method}', f'Comm_{selection_method}'])
    return df

def main_experiments():
    
    rounds = 200
    # Run experiments for each method
    df_high_loss = run_experiment("high_loss", rounds, num_selected_clients=2)
    df_lora = run_experiment("high_loss", rounds, num_selected_clients=2, is_LoRA=True)
    df_lora_svd = run_experiment("high_loss", rounds, num_selected_clients=2, is_LoRA=True, use_svd=True)
    
    # Merge DataFrames on 'Round'
    df_combined = df_high_loss.merge(df_lora, on='Round').merge(df_lora_svd, on='Round')
    # df_combined = df_lora_svd

    # Save to CSV for later inspection if needed
    df_combined.to_csv("comparison_results_test.csv", index=False)

if __name__ == "__main__":
    main_experiments()

