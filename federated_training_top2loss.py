# -*- coding: utf-8 -*-
"""Federated Training.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tE-M1T-9BL-HglL5A7asx4b31Sdyhcdq
"""

import torch
import torch.nn as nn
import torch.optim as optim
import torch.utils.data as data
import torchvision.transforms as transforms
import torchvision.datasets as datasets
import numpy as np
import random
import os
import matplotlib.pyplot as plt
import ssl 


# 定义 MLP 模型
class MLPModel(nn.Module):
    def __init__(self):
        super(MLPModel, self).__init__()
        self.fc1 = nn.Linear(28 * 28, 200)  # 第一层，输入维度 784 -> 200
        self.fc2 = nn.Linear(200, 200)      # 第二层，200 -> 200
        self.fc3 = nn.Linear(200, 10)       # 输出层，200 -> 10
        self.relu = nn.ReLU()

    def forward(self, x):
        x = x.view(x.size(0), -1)  # 展平输入 (batch_size, 1, 28, 28) -> (batch_size, 784)
        x = self.relu(self.fc1(x))
        x = self.relu(self.fc2(x))
        x = self.fc3(x)  # 直接输出，不使用 Softmax（因为 PyTorch 的 CrossEntropyLoss 里已经包含了）
        return x

# 加载 MNIST 数据集
def load_mnist_data(data_path="./data"):
    
    # Temporarily Skip SSL velidation step 
    ssl._create_default_https_context = ssl._create_unverified_context

    transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))])

    if os.path.exists(os.path.join(data_path, "MNIST/raw/train-images-idx3-ubyte")):
        print("✅ MNIST 数据集已存在，跳过下载。")
    else:
        print("⬇️ 正在下载 MNIST 数据集...")

    train_data = datasets.MNIST(root=data_path, train=True, transform=transform, download=True)
    test_data = datasets.MNIST(root=data_path, train=False, transform=transform, download=True)

    visualize_mnist_samples(train_data)
    return train_data, test_data

# 显示数据集示例图片
def visualize_mnist_samples(dataset, num_samples=10):
    fig, axes = plt.subplots(1, num_samples, figsize=(num_samples * 1.2, 1.5))
    for i in range(num_samples):
        img, label = dataset[i]
        axes[i].imshow(img.squeeze(), cmap="gray")
        axes[i].set_title(label)
        axes[i].axis("off")
    plt.show()

# 分割 MNIST 数据，使每个客户端只包含某个数字类别
def split_data_by_label(dataset):
    # 自定义每个类别的数据量
    client_data_sizes = {
        0: 5000,
        1: 7000,
        2: 6000,
        3: 8000,
        4: 4000,
        5: 9000,
        6: 3000,
        7: 10000,
        8: 7500,
        9: 6500
    }

    label_to_indices = {i: [] for i in range(10)}  # 记录每个类别的索引

    # 收集每个类别的数据索引
    for idx, (_, label) in enumerate(dataset):
        label_to_indices[label].append(idx)

    # 为每个 client 选择对应类别的数据，并裁剪成需要的数量
    client_datasets = []
    for label, size in client_data_sizes.items():
        indices = label_to_indices[label][:size]  # 取前 size 个样本
        client_datasets.append((label, torch.utils.data.Subset(dataset, indices)))  # 存储 (类别, 数据集)

    print("📊 客户端数据分布:", client_data_sizes)
    return client_datasets, client_data_sizes

# 本地训练函数
def local_train(model, train_loader, epochs=5, lr=0.01):
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.SGD(model.parameters(), lr=lr)
    model.train()
    for epoch in range(epochs):
        for batch_x, batch_y in train_loader:
            optimizer.zero_grad()
            outputs = model(batch_x)
            loss = criterion(outputs, batch_y)
            loss.backward()
            optimizer.step()
    return model.state_dict()

# 联邦平均聚合函数
def fed_avg(global_model, client_state_dicts, client_sizes):
    global_dict = global_model.state_dict()
    total_data = sum(client_sizes.values())  # 计算所有客户端数据总量
    for key in global_dict.keys():
        global_dict[key] = sum(client_state[key] * (client_sizes[label] / total_data)
                               for (label, client_state) in client_state_dicts)
    global_model.load_state_dict(global_dict)
    return global_model

# 评估模型
def evaluate(model, test_loader):
    model.eval()
    criterion = nn.CrossEntropyLoss()
    correct, total, total_loss = 0, 0, 0.0
    with torch.no_grad():
        for batch_x, batch_y in test_loader:
            outputs = model(batch_x)
            loss = criterion(outputs, batch_y)
            total_loss += loss.item()
            _, predicted = torch.max(outputs, 1)
            total += batch_y.size(0)
            correct += (predicted == batch_y).sum().item()
    accuracy = correct / total * 100
    return total_loss / len(test_loader), accuracy

def main():
    torch.manual_seed(0)
    random.seed(0)
    np.random.seed(0)

    # 加载 MNIST 数据集
    train_data, test_data = load_mnist_data()

    # 生成客户端数据集，每个客户端只包含特定类别
    client_datasets, client_data_sizes = split_data_by_label(train_data)

    # 创建数据加载器
    client_loaders = {label: data.DataLoader(dataset, batch_size=32, shuffle=True)
                      for label, dataset in client_datasets}
    test_loader = data.DataLoader(test_data, batch_size=32, shuffle=False)

    # 初始化全局模型
    global_model = MLPModel()

    ###################### changed by TAIGE for top two loss client training ###########################

    # 4. Federated training
    rounds = 100
    for r in range(rounds):
        print(f"\n=== Round {r+1} FedAvg ===")

        # (a) First, measure the average loss of each client under the current global model
        client_losses = {}
        for label, loader in client_loaders.items():
            loss_val = evaluate(global_model, loader)
            client_losses[label] = loss_val

        # (b) Sort the clients by loss in descending order, and select the top 2
        sorted_clients = sorted(client_losses.items(), key=lambda x: x[1], reverse=True)
        top2 = sorted_clients[:2]  # top 2 (label, lossValue)
        selected_clients = [item[0] for item in top2]  # extract only the labels

        print("    All clients' loss:", client_losses)
        print("    Top 2 clients with the highest loss:", selected_clients)

        # (c) Perform local training on these two selected clients
        client_state_dicts = []
        selected_client_sizes = {}
        for label in selected_clients:
            local_model = MLPModel()
            local_model.load_state_dict(global_model.state_dict())  # copy the global model parameters
            updated_params = local_train(
                local_model,
                client_loaders[label],
                epochs=1,   # you can increase this for more local training
                lr=0.01     # you can tune this learning rate
            )
            client_state_dicts.append((label, updated_params))
            selected_client_sizes[label] = client_data_sizes[label]  # needed for weighted FedAvg

        # (d) Aggregate with FedAvg
        fed_avg(global_model, client_state_dicts, selected_client_sizes)

        # (e) Evaluate the current global model on the test set
        loss, acc = evaluate(global_model, test_loader)
        print(f"  [Round {r+1}] Test Loss = {loss:.4f}, Test Acc = {acc:.2f}%")


        ##########################################################################################

    # 输出最终模型的性能
    final_loss, final_accuracy = evaluate(global_model, test_loader)
    print(f"\n🎯 Loss of final model test dataset: {final_loss:.4f}")
    print(f"🎯 Final model test set accuracy: {final_accuracy:.2f}%")

if __name__ == "__main__":
    main()