# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10l6XsOmDKyRTRMMtinKx0cKuKb7Zu_c-
"""

# -*- coding: utf-8 -*-
"""Federated Training.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tE-M1T-9BL-HglL5A7asx4b31Sdyhcdq
"""

import torch
import torch.nn as nn
import torch.optim as optim
import torch.utils.data as data
import torchvision.transforms as transforms
import torchvision.datasets as datasets
import numpy as np
import random
import os
import matplotlib.pyplot as plt
import csv
import pandas as pd
from datetime import datetime
! pip install fvcore
from fvcore.nn import FlopCountAnalysis
import torch.nn.functional as F
import torch.nn.utils.prune as prune


class LoRALinear(nn.Module):
    def __init__(self, linear_layer, rank=8, alpha=1.0):
        super().__init__()
        self.original = linear_layer  # 原始线性层（冻结）
        self.original.requires_grad_(False)

        m, n = linear_layer.weight.shape
        self.rank = rank
        self.alpha = alpha / rank  # 缩放系数

        # 初始化低秩矩阵 A 和 B
        self.A = nn.Parameter(torch.randn(m, rank))  # 随机初始化 A
        self.B = nn.Parameter(torch.zeros(n, rank))  # 零初始化 B

    def forward(self, x):
        # 计算低秩更新：ΔW = A @ B^T
        delta_W = self.alpha * (self.A @ self.B.T)
        # 输出 = 原始权重输出 + 低秩更新输出
        return self.original(x) + F.linear(x, delta_W)



# 定义 MLP 模型
class MLPModel(nn.Module):
    def __init__(self, use_lora=False, rank=8):
        super(MLPModel, self).__init__()
        self.use_lora = use_lora
        self.rank = rank

        # 原始全连接层
        self.fc1 = nn.Linear(28 * 28, 200)
        self.fc2 = nn.Linear(200, 200)
        self.fc3 = nn.Linear(200, 10)
        self.relu = nn.ReLU()

        # 如果启用 LoRA，替换为 LoRALinear
        if use_lora:
            self.fc1 = LoRALinear(self.fc1, rank=rank)
            self.fc2 = LoRALinear(self.fc2, rank=rank)
            self.fc3 = LoRALinear(self.fc3, rank=rank)

    def forward(self, x):
        x = x.view(x.size(0), -1)
        x = self.relu(self.fc1(x))
        x = self.relu(self.fc2(x))
        x = self.fc3(x)
        return x


# 加载 MNIST 数据集
def load_mnist_data(data_path="./data"):
    transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))])

    if os.path.exists(os.path.join(data_path, "MNIST/raw/train-images-idx3-ubyte")):
        print("✅ MNIST 数据集已存在，跳过下载。")
    else:
        print("⬇️ 正在下载 MNIST 数据集...")

    train_data = datasets.MNIST(root=data_path, train=True, transform=transform, download=True)
    test_data = datasets.MNIST(root=data_path, train=False, transform=transform, download=True)

    # visualize_mnist_samples(train_data)
    return train_data, test_data


# 显示数据集示例图片
def visualize_mnist_samples(dataset, num_samples=10):
    fig, axes = plt.subplots(1, num_samples, figsize=(num_samples * 1.2, 1.5))
    for i in range(num_samples):
        img, label = dataset[i]
        axes[i].imshow(img.squeeze(), cmap="gray")
        axes[i].set_title(label)
        axes[i].axis("off")
    plt.show()




def local_train_lora(model, train_loader, epochs=1, lr=0.01):
    criterion = nn.CrossEntropyLoss()

    # 仅优化 LoRA 参数（A 和 B）
    lora_params = []
    for name, param in model.named_parameters():
        if 'A' in name or 'B' in name:  # 只选择 LoRA 的参数
            lora_params.append(param)
    optimizer = optim.SGD(lora_params, lr=lr)

    model.train()
    for epoch in range(epochs):
        for batch_x, batch_y in train_loader:
            optimizer.zero_grad()
            outputs = model(batch_x)
            loss = criterion(outputs, batch_y)
            loss.backward()
            optimizer.step()
    return model.state_dict()

def split_data_by_label(dataset, num_clients=10):
    """
    手动划分数据集，每个客户端包含 10 个类别，并自定义样本数量。
    :param dataset: 原始数据集（如 MNIST）
    :param num_clients: 客户端总数
    :return: (客户端数据集, 客户端数据大小)
    """
    # 手动划分的样本数量（每个客户端 10 个类别的数据量）
    client_data_sizes = {
        0: {0: 600},
        1: {1: 700},
        2: {2: 500},
        3: {3: 600},
        4: {4: 600},
        5: {5: 500},
        6: {6: 500},
        7: {7: 500},
        8: {8: 500},
        9: {9: 500}
    }

    # client_data_sizes = {
    #     0: {0: 600, 1: 600, 2: 600, 3: 100, 4: 100, 5: 100, 6: 100, 7: 100, 8: 100, 9: 100},
    #     1: {1: 700, 2: 700, 3: 700, 0: 100, 4: 100, 5: 100, 6: 100, 7: 100, 8: 100, 9: 100},
    #     2: {2: 700, 3: 700, 4: 700, 0: 100, 1: 100, 5: 100, 6: 100, 7: 100, 8: 100, 9: 100},
    #     3: {3: 700, 4: 700, 5: 700, 0: 100, 1: 100, 2: 100, 6: 100, 7: 100, 8: 100, 9: 100},
    #     4: {4: 700, 5: 700, 6: 700, 0: 100, 1: 100, 2: 100, 3: 100, 7: 100, 8: 100, 9: 100},
    #     5: {5: 700, 6: 700, 7: 700, 0: 100, 1: 100, 2: 100, 3: 100, 4: 100, 8: 100, 9: 100},
    #     6: {6: 700, 7: 700, 8: 700, 0: 100, 1: 100, 2: 100, 3: 100, 4: 100, 5: 100, 9: 100},
    #     7: {7: 700, 8: 700, 9: 700, 0: 100, 1: 100, 2: 100, 3: 100, 4: 100, 5: 100, 6: 100},
    #     8: {8: 700, 9: 700, 0: 700, 1: 100, 2: 100, 3: 100, 4: 100, 5: 100, 6: 100, 7: 100},
    #     9: {9: 700, 0: 700, 1: 700, 2: 100, 3: 100, 4: 100, 5: 100, 6: 100, 7: 100, 8: 100}
    # }

    # 统计每个类别的数据索引
    label_to_indices = {i: [] for i in range(10)}  # 记录每个类别的索引
    for idx, (_, label) in enumerate(dataset):
        label_to_indices[label].append(idx)

    # 初始化客户端数据存储
    client_data_subsets = {}
    client_actual_sizes = {i: {label: 0 for label in range(10)} for i in range(num_clients)}  # 记录实际分配的数据量

    # 遍历每个客户端，为其分配指定类别的数据
    for client_id, label_info in client_data_sizes.items():
        selected_indices = []  # 临时存储该客户端所有选中的索引
        for label, size in label_info.items():
            # 确保不超出类别数据集实际大小
            available_size = len(label_to_indices[label])
            sample_size = min(available_size, size)

            if sample_size < size:
                print(f"⚠️ 警告：类别 {label} 的数据不足，客户端 {client_id} 只能获取 {sample_size} 条样本（需求 {size} 条）")

            # 从该类别中随机抽取样本
            sampled_indices = random.sample(label_to_indices[label], sample_size)
            selected_indices.extend(sampled_indices)

            # 记录实际分配的数据量
            client_actual_sizes[client_id][label] = sample_size

        # 创建 PyTorch Subset
        client_data_subsets[client_id] = torch.utils.data.Subset(dataset, selected_indices)

    # 打印每个客户端的实际分配数据量
    print("\n📊 每个客户端实际数据分布:")
    for client_id, label_sizes in client_actual_sizes.items():
        print(f"客户端 {client_id}: {label_sizes}")

    return client_data_subsets, client_actual_sizes


# 本地训练函数
def local_train(model, train_loader, epochs=5, lr=0.01):
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.SGD(model.parameters(), lr=lr)
    model.train()
    for epoch in range(epochs):
        for batch_x, batch_y in train_loader:
            optimizer.zero_grad()
            outputs = model(batch_x)
            loss = criterion(outputs, batch_y)
            loss.backward()
            optimizer.step()
    return model.state_dict()



#  联邦平均聚合函数
def fed_avg(global_model, client_state_dicts, client_sizes):
    global_dict = global_model.state_dict()
    subkey = [sublist[0] for sublist in client_state_dicts]
    new_client_sizes = dict(([(key, client_sizes[key]) for key in subkey]))
    total_data = sum(sum(label_sizes.values()) for label_sizes in new_client_sizes.values())  # 计算所有客户端数据总量
    for key in global_dict.keys():
        global_dict[key] = sum(
            client_state[key] * (sum(new_client_sizes[client_id].values()) / total_data)
            for (client_id, client_state) in client_state_dicts
        )
    global_model.load_state_dict(global_dict)
    return global_model


# 评估模型
def evaluate(model, test_loader):
    model.eval()
    criterion = nn.CrossEntropyLoss()
    correct, total, total_loss = 0, 0, 0.0
    with torch.no_grad():
        for batch_x, batch_y in test_loader:
            outputs = model(batch_x)
            loss = criterion(outputs, batch_y)
            total_loss += loss.item()
            _, predicted = torch.max(outputs, 1)
            total += batch_y.size(0)
            correct += (predicted == batch_y).sum().item()
    accuracy = correct / total * 100
    return total_loss / len(test_loader), accuracy


# def entropy_weight(matrix):
#     """
#     matrix: np.array of shape (n_clients, n_indicators)，即 N × 2 的指标矩阵
#     return: weight of each indicator (np.array of shape (2,))
#     """
#     P = matrix / matrix.sum(axis=0)  # 归一化为概率矩阵
#     K = 1 / np.log(matrix.shape[0])
#     E = -K * np.sum(P * np.log(P + 1e-12), axis=0)  # 熵值
#     d = 1 - E
#     w = d / np.sum(d)
#     return w

# def calculate_GRC(global_model, client_models, client_losses):
#     """
#     计算客户端的 GRC 分数。

#     参数:
#         global_model (nn.Module): 全局模型。
#         client_models (list): 客户端本地模型列表。
#         client_losses (list): 客户端训练损失列表。

#     返回:
#         list: 每个客户端的 GRC 分数。
#     """
#     # 1. 构建参考序列（理想值：损失=0，模型参数差异=0）
#     ref_loss = 0.0
#     ref_param_diff = 0.0

#     # 2. 计算客户端指标
#     param_diffs = []
#     for model in client_models:
#         diff = 0.0
#         for g_param, l_param in zip(global_model.parameters(), model.parameters()):
#             diff += torch.norm(g_param - l_param).item()  # 参数差异（L2范数）
#         param_diffs.append(diff)

#     # 3. 对 losses 和 diffs 进行 mapping
#     def map_sequence(sequence):
#         max_val = max(sequence)
#         min_val = min(sequence)
#         return [(max_val + x) / (max_val + min_val) for x in sequence]

#     client_losses = map_sequence(client_losses)  # 映射后的 losses
#     param_diffs = map_sequence(param_diffs)  # 映射后的 diffs


#     max_loss = max(client_losses)
#     max_diff = max(param_diffs)


#     # 4. 计算全局极值
#     all_deltas = []
#     for nl, nd in zip(client_losses, param_diffs):
#         all_deltas.append(abs(nl - max_loss))  # 损失差值
#         all_deltas.append(abs(nd - max_diff))  # 参数差异差值
#     max_delta = max(all_deltas)  # 全局最大值
#     min_delta = min(all_deltas)  # 全局最小值

#     # 5. 计算 GRC（分辨系数 ρ=0.5）
#     grc_scores = []
#     grc_losses = []
#     grc_diffs = []
#     for nl, nd in zip(client_losses, param_diffs):
#         delta_loss = abs(nl - max_loss)
#         delta_diff = abs(nd - max_diff)

#         # 灰色关联系数公式
#         grc_loss = (min_delta + 0.5 * max_delta) / (delta_loss + 0.5 * max_delta)
#         grc_diff = (min_delta + 0.5 * max_delta) / (delta_diff + 0.5 * max_delta)

#         grc_losses.append(grc_loss)
#         grc_diffs.append(grc_diff)

#     # 将 grc_loss 和 grc_diff 组合成指标矩阵 (n_clients × 2)
#     grc_metrics = np.stack([client_losses, param_diffs], axis=1)

#     # 计算熵权法权重
#     weights = entropy_weight(grc_metrics)  # [w_loss, w_diff]

#     # 计算最终的加权分数
#     weighted_score = grc_losses / weights[0] + grc_diffs / weights[1]

#     return weighted_score,weights


def entropy_weight(l):
    entropies = []
    for X in l:
        P = X / (np.sum(X) + 1e-12)  # 归一化得到概率分布
        K = 1 / np.log(len(X))
        E = -K * np.sum(P * np.log(P + 1e-12))  # 计算熵，越大越无区分度
        entropies.append(E)

        # 算信息量
    information_gain = [1 - e for e in entropies]
    # 归一化
    sum_ig = sum(information_gain)
    weights = [ig / sum_ig for ig in information_gain]

    return weights


def calculate_GRC(global_model, client_models, client_losses):
    """
    正确计算 GRC 分数，并修正后续步骤
    """

    # 1. 计算客户端指标（参数差异）
    param_diffs = []
    for model in client_models:
        diff = 0.0
        for g_param, l_param in zip(global_model.parameters(), model.parameters()):
            diff += torch.norm(g_param - l_param).item()
        param_diffs.append(diff)

    # 2. 对 losses 和 diffs 进行正确 mapping
    def map_sequence_loss(sequence):
        max_val = max(sequence)
        min_val = min(sequence)
        return [(max_val - x) / (max_val + min_val) for x in sequence]  # 【✔】负相关

    def map_sequence_diff(sequence):
        max_val = max(sequence)
        min_val = min(sequence)
        return [(x - min_val) / (max_val + min_val) for x in sequence]  # 【✔】正相关

    client_losses = map_sequence_loss(client_losses)
    param_diffs = map_sequence_diff(param_diffs)

    # 3. 构建参考序列 (理想值 = 1)
    ref_loss = 1.0
    ref_diff = 1.0

    # 4. 计算每个指标的 Δ
    all_deltas = []
    for loss, diff in zip(client_losses, param_diffs):
        all_deltas.append(abs(loss - ref_loss))
        all_deltas.append(abs(diff - ref_diff))
    max_delta = max(all_deltas)
    min_delta = min(all_deltas)

    # 5. 计算灰色关联系数 (GRC)，ρ=0.5
    grc_losses = []
    grc_diffs = []
    for loss, diff in zip(client_losses, param_diffs):
        delta_loss = abs(loss - ref_loss)
        delta_diff = abs(diff - ref_diff)

        grc_loss = (min_delta + 0.5 * max_delta) / (delta_loss + 0.5 * max_delta)
        grc_diff = (min_delta + 0.5 * max_delta) / (delta_diff + 0.5 * max_delta)

        grc_losses.append(grc_loss)
        grc_diffs.append(grc_diff)

    grc_losses = np.array(grc_losses)
    grc_diffs = np.array(grc_diffs)

    # 6. 计算熵权（基于原始mapped数据）
    grc_metrics = np.vstack([client_losses, param_diffs])  # 【注意】这里 shape 是 (2, n_clients)
    weights = entropy_weight(grc_metrics)  # 【✔】熵权算的是原mapped指标，不是grc！

    # 7. 加权求和，注意是【乘法】不是除法
    weighted_score = grc_losses * weights[0] + grc_diffs * weights[1]  # 【修改点】乘法！

    return weighted_score, weights

def compute_model_flops(
    model, input_shape=(1, 1, 28, 28), batch_size=1, num_samples=1, epochs=1, backward_factor=0, verbose=False
):
    """
    计算训练阶段的总 FLOPs（估算）
    :param model: PyTorch 模型
    :param input_shape: 单个样本的输入 shape（如 MNIST 为 (1, 28, 28)）
    :param batch_size: 每次输入的样本数
    :param num_samples: 该客户端一共多少训练样本
    :param epochs: 每轮训练几个 epoch
    :param backward_factor: backward FLOPs 是 forward 的几倍（一般是 2~3）
    :param verbose: 是否打印每层 FLOPs
    :return: 估算总 FLOPs
    """
    model.eval()
    dummy_input = torch.randn((batch_size, *input_shape[1:]))  # 注意拆解 shape
    flops_analyzer = FlopCountAnalysis(model, dummy_input)

    if verbose:
        print(flops_analyzer.by_module())  # 打印每层 FLOPs
        print(f"📊 单个 batch 的 forward FLOPs: {flops_analyzer.total() / 1e6:.2f} MFLOPs")

    # 单个 batch 的 forward FLOPs
    forward_flops_per_batch = flops_analyzer.total()

    # 训练 FLOPs ≈ (forward + backward) × 批次数 × epoch
    num_batches = int(np.ceil(num_samples / batch_size))
    total_training_flops = forward_flops_per_batch * (1 + backward_factor) * num_batches * epochs

    return total_training_flops

def apply_pruning(model, amount=0.3):
    for name, module in model.named_modules():
        if isinstance(module, nn.Linear):
            torch.nn.utils.prune.ln_structured(module, name='weight', amount=amount, n=2, dim=0)
            torch.nn.utils.prune.remove(module, 'weight')  # 🔥 移除掩码，实际修改模型结构
    return model

def apply_freezing(model):
    for name, param in model.named_parameters():
        if 'weight' in name or 'bias' in name:
            param.requires_grad = False
    return model

def apply_partial_freezing(model, freeze_layers=1):
    """
    冻结模型前 freeze_layers 个 Linear 层的权重和偏置。
    """
    count = 0
    for module in model.modules():
        if isinstance(module, nn.Linear):
            for name, param in module.named_parameters():
                param.requires_grad = False
            count += 1
            if count >= freeze_layers:
                break
    return model

def select_clients(client_loaders, use_all_clients=False, num_select=None,
                   select_by_loss=False, global_model=None, grc=False,lora=True, prune=False, freeze=False):
    total_flops = 0
    epochs = 1
    backward_factor = 3  # 训练过程中 FLOPs 是 forward 的 3 倍左右
    if grc:  # 使用 GRC 选择客户端
        client_models = []
        # 1. 训练本地模型并计算损失
        client_losses = []
        # 初始化 FLOPs 累加器
        for client_id, client_loader in client_loaders.items():
            local_model = MLPModel(use_lora=lora, rank=8) # 初始化本地模型
            local_model.load_state_dict(global_model.state_dict()) # 同步全局模型
            if prune:
                local_model = apply_pruning(local_model, amount=0.3)
            if freeze:
                local_model = apply_partial_freezing(local_model)
            # 每轮都重新估计一次 FLOPs（避免模型变结构时不更新）
            n_samples = len(client_loader.dataset)
            sample_flops = compute_model_flops(local_model, input_shape=(1, 1, 28, 28), num_samples = n_samples)
            total_flops += sample_flops * n_samples * epochs * backward_factor
            local_train_lora(local_model, client_loader, epochs=1, lr=0.01)
            client_models.append(local_model)
            loss, _ = evaluate(local_model, client_loader)
            client_losses.append(loss)
        print(f"📊 本轮客户端选择阶段估算总 FLOPs: {total_flops / 1e12:.4f} TFLOPs")

        # 2. 计算 GRC 分数
        grc_scores, grc_weights = calculate_GRC(global_model, client_models, client_losses)
        select_clients.latest_weights = grc_weights  # 记录权重

        # 3. 按 GRC 分数排序（从高到低，GRC越高表示越好）
        client_grc_pairs = list(zip(client_loaders.keys(), grc_scores))
        client_grc_pairs.sort(key=lambda x: x[1], reverse=True)  # 降序排序

        # 4. 选择 GRC 最高的前 num_select 个客户端
        selected = [client_id for client_id, _ in client_grc_pairs[:num_select]]
        return selected, total_flops

    # 其余选择逻辑保持不变

    if use_all_clients is True:
        print("Selecting all clients")
        return list(client_loaders.keys())

    if num_select is None:
        raise ValueError("If use_all_clients=False, num_select cannot be None!")

    if select_by_loss and global_model:
        client_losses = {}
        for client_id, loader in client_loaders.items():
            local_model = MLPModel(use_lora=lora, rank=8)
            local_model.load_state_dict(global_model.state_dict())
            if prune:
                local_model = apply_pruning(local_model, amount=0.3)
            if freeze:
                local_model = apply_partial_freezing(local_model)
            # 每轮都重新估计一次 FLOPs（避免模型变结构时不更新）
            sample_flops = compute_model_flops(local_model, input_shape=(1, 1, 28, 28))
            n_samples = len(loader.dataset)
            total_flops += sample_flops * n_samples * epochs
            # local_train(local_model, loader, epochs=1, lr=0.01)
            loss, _ = evaluate(local_model, loader)
            client_losses[client_id] = loss
        selected_clients = sorted(client_losses, key=client_losses.get, reverse=True)[:num_select]
        print(f"Selected {num_select} clients with the highest loss: {selected_clients}")
        print(f"📊 本轮客户端选择阶段估算总 FLOPs: {total_flops / 1e12:.4f} TFLOPs")
    else:
        selected_clients = random.sample(list(client_loaders.keys()), num_select)
        print(f"Randomly selected {num_select} clients: {selected_clients}")

    return selected_clients, total_flops


def update_communication_counts(communication_counts, selected_clients, event):
    """
    客户端通信计数
    - event='receive' 表示客户端接收到全局模型
    - event='send' 表示客户端上传本地模型
    - event='full_round' 仅在客户端完成完整收发时增加
    """
    for client_id in selected_clients:
        communication_counts[client_id][event] += 1

        # 仅当客户端完成一次完整的 send 和 receive 时增加 full_round
        if event == "send" and communication_counts[client_id]['receive'] > 0:
            communication_counts[client_id]['full_round'] += 1

def run_experiment(rounds, client_loaders, test_loader, client_data_sizes, freeze=False, prune=False, grc = False, label="",):
    global_model = MLPModel()
    global_accuracies = []
    total_communication_counts = []
    total_tflops = 0

    communication_counts = {
        client_id: {'send': 0, 'receive': 0, 'full_round': 0}
        for client_id in client_loaders.keys()
    }

    # 实验数据存储 CSV
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    csv_filename = f"training_data_{timestamp}.csv"
    csv_data = []

    for r in range(rounds):
        print(f"\n🔁 [{label}] Round {r + 1}")
        selected_clients, round_flops = select_clients(
            client_loaders, use_all_clients=False, num_select=2,
            select_by_loss=True, global_model=global_model,
            prune=prune, freeze=freeze, lora=False, grc=False
        )

        update_communication_counts(communication_counts, selected_clients, "receive")
        total_tflops += round_flops / 1e12

        client_state_dicts = []
        for client_id in selected_clients:
            local_model = MLPModel()
            local_model.load_state_dict(global_model.state_dict())
            local_state = local_train(local_model, client_loaders[client_id], epochs=1, lr=0.1)
            update_communication_counts(communication_counts, [client_id], "send")
            param_mean = {name: param.mean().item() for name, param in local_model.named_parameters()}
            client_state_dicts.append((client_id, local_state))
            print(f"  ✅ 客户端 {client_id} 训练完成 | 样本数量: {sum(client_data_sizes[client_id].values())}")
            print(f"  📌 客户端 {client_id} 模型参数均值: {param_mean}")

        # 通信次数计算
        total_send = sum(communication_counts[c]['send'] - (communication_counts[c]['full_round'] - 1) for c in selected_clients)
        total_receive = sum(communication_counts[c]['receive'] - (communication_counts[c]['full_round'] - 1) for c in selected_clients)
        total_comm = total_send + total_receive
        if len(total_communication_counts) > 0:
            total_comm += total_communication_counts[-1]
        total_communication_counts.append(total_comm)

        # 聚合
        global_model = fed_avg(global_model, client_state_dicts, client_data_sizes)
        loss, accuracy = evaluate(global_model, test_loader)
        global_accuracies.append(accuracy)

        # 输出最终模型的性能
        final_loss, final_accuracy = evaluate(global_model, test_loader)
        print(f"🎯 Final model test set accuracy: {final_accuracy:.2f}%")

        # 输出通信记录
        print("\n Client Communication Statistics:")
        for client_id, counts in communication_counts.items():
            print(f"Client {client_id}: Sent {counts['send']} times, Received {counts['receive']} times, Completed full_round {counts['full_round']} times")
        # 记录数据到 CSV
        if grc and hasattr(select_clients, 'latest_weights'):
            w_loss = select_clients.latest_weights[0]
            w_diff = select_clients.latest_weights[1]
            print(f"📈 Round {r + 1} | GRC 权重: w_loss = {w_loss:.4f}, w_diff = {w_diff:.4f}")

        else:
            w_loss = 'NA'
            w_diff = 'NA'

        csv_data.append([
            r + 1,
            accuracy,
            total_comm,
            ",".join(map(str, selected_clients)),
            w_loss,
            w_diff
        ])
        df = pd.DataFrame(csv_data, columns=[
            'Round', 'Accuracy', 'Total communication counts', 'Selected Clients',
            'GRC Weight - Loss', 'GRC Weight - Diff'])
        df.to_csv(csv_filename, index=False)

    return global_accuracies, total_communication_counts ,total_tflops


def main():
    torch.manual_seed(0)
    random.seed(0)
    np.random.seed(0)

    # 加载 MNIST 数据集
    train_data, test_data = load_mnist_data()

    # 生成客户端数据集，每个客户端包含多个类别
    client_datasets, client_data_sizes = split_data_by_label(train_data)

    # 创建数据加载器
    client_loaders = {client_id: data.DataLoader(dataset, batch_size=32, shuffle=True)
                      for client_id, dataset in client_datasets.items()}
    test_loader = data.DataLoader(test_data, batch_size=32, shuffle=False)

    # 初始化全局模型
    lora = False
    global_model = MLPModel(use_lora=lora, rank=8)
    global_accuracies = []  # 记录每轮全局模型的测试集准确率
    total_communication_counts = []  # 记录每轮客户端通信次数
    rounds = 50  # 联邦学习轮数
    use_all_clients = False  # 是否进行客户端选择
    num_selected_clients = 2  # 每轮选择客户端训练数量
    use_loss_based_selection = True  # 是否根据 loss 选择客户端
    t_flops = 0
    grc = False
    prune = True
    freeze = False

    # 三组实验
    acc_base, comm_base, flops_base = run_experiment(rounds, client_loaders, test_loader, client_data_sizes, freeze=False, prune=False, grc = False, label="Loss Only")
    acc_freeze, comm_freeze, flops_freeze = run_experiment(rounds, client_loaders, test_loader, client_data_sizes, freeze=True, prune=False, grc = False, label="Loss + Freeze")
    acc_prune, comm_prune, flops_prune = run_experiment(rounds, client_loaders, test_loader, client_data_sizes, freeze=False, prune=True, grc = False, label="Loss + Prune")


    # 🔋 绘制 FLOPs 柱状图
    plt.figure(figsize=(6, 5))
    labels = ["Loss Only", "Loss + Freeze", "Loss + Prune"]
    flops_values = [flops_base, flops_freeze, flops_prune]
    colors = ["blue", "green", "red"]

    plt.bar(labels, flops_values, color=colors)
    plt.ylabel("Total Estimated Training FLOPs (TFLOPs)")
    plt.title("FLOPs Comparison Across Strategies")
    plt.grid(axis="y")
    plt.tight_layout()
    plt.show()


    # 绘图
    plt.figure(figsize=(8, 5))
    plt.plot(range(1, rounds + 1 ), acc_base, 'b-', marker='o', label="Loss Only")
    plt.plot(range(1, rounds + 1), acc_freeze, 'g-', marker='^', label="Loss + Freeze")
    plt.plot(range(1, rounds + 1), acc_prune, 'r-', marker='s', label="Loss + Prune")
    plt.xlabel("Federated Learning Rounds")
    plt.ylabel("Accuracy")
    plt.title("Test Accuracy Over Federated Learning Rounds")
    plt.legend()
    plt.grid(True)
    plt.show()

    plt.figure(figsize=(8, 5))
    plt.plot(comm_base, acc_base, 'b-', marker='o', label="Loss Only")
    plt.plot(comm_freeze, acc_freeze, 'g-', marker='^', label="Loss + Freeze")
    plt.plot(comm_prune, acc_prune, 'r-', marker='s', label="Loss + Prune")
    plt.xlabel("Total Communication Count")
    plt.ylabel("Accuracy")
    plt.title("Test Accuracy vs. Total Communication")
    plt.legend()
    plt.grid(True)
    plt.show()

if __name__ == "__main__":
    main()